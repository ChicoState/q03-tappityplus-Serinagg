commit 5c1413e7667954d64939f1f4050b2e5bea692447
Author: serinagg <sgarcia14@mail.csuchico.edu>
Date:   Mon Dec 5 10:32:57 2022 -0800

    implementation and testing added

diff --git a/tappity.cpp b/tappity.cpp
index 48f519a..7169e27 100644
--- a/tappity.cpp
+++ b/tappity.cpp
@@ -1,17 +1,31 @@
 #include "tappity.h"
+#include <stdexcept>
+#include <cmath>
+using namespace std;
 /**
  * Class for tappity
 **/
 
 //Constructor sets the reference phrase
-tappity::tappity(std::string reference)
+tappity::tappity(string reference)
 {
+	if(reference.length() != 0)
+	{
+		refer = reference;
+		user_in = "";
+	}
+	else
+		throw invalid_argument("no reference phrase inputed.");
 }
 
 //Provide the input to be compared to the reference. Before this 
 //function is called, the input should be considered an empty string
 void tappity::entry(std::string input)
 {
+	if(user_in.length() == 0)
+		user_in = input;
+	else
+		throw invalid_argument("input already gathered.");
 }
 
 //Compares the length of the reference to that of the input and
@@ -19,7 +33,7 @@ void tappity::entry(std::string input)
 //same length
 int tappity::length_difference()
 {
-  return 0;
+  return abs(int(refer.length() - user_in.length()));
 }
 
 //Compares the content of the reference to that of the input and
@@ -36,5 +50,30 @@ int tappity::length_difference()
 //locations in another string that has 16 characters, the accuracy is 50.
 double tappity::accuracy()
 {
-  return 0;
+	double matches = 0;
+	double total = 0;
+	double accurate = 0;
+	if(length_difference() == 0 || refer.length() < user_in.length())
+	{
+		total = user_in.length();
+		for(int i = 0; i < refer.length(); i++)
+		{
+			if(refer[i] == user_in[i])
+				matches++;
+		}
+	}
+	else
+	{
+		if(user_in.length() < refer.length())
+		{
+			total = refer.length();
+			for(int i = 0; i < user_in.length(); i++)
+			{
+				if(user_in[i] == refer[i])
+					matches++;
+			}
+		}
+	}
+	accurate = ((matches/total) *100);
+  return accurate;
 }
diff --git a/tappity.h b/tappity.h
index b604be8..17c7631 100644
--- a/tappity.h
+++ b/tappity.h
@@ -8,7 +8,8 @@
 class tappity
 {
     private:
-
+	   std::string refer = "";
+	   std::string user_in = "";
     public:
         //Constructor sets the reference phrase
         tappity(std::string reference);
diff --git a/tappityTest.cpp b/tappityTest.cpp
index 5fb69c4..f02e671 100644
--- a/tappityTest.cpp
+++ b/tappityTest.cpp
@@ -4,7 +4,10 @@
 
 #include <gtest/gtest.h>
 #include "tappity.h"
- 
+#include <string>
+
+using namespace std;
+
 class tappityTest : public ::testing::Test
 {
 	protected:
@@ -12,4 +15,255 @@ class tappityTest : public ::testing::Test
 		virtual ~tappityTest(){} 
 		virtual void SetUp(){}
 		virtual void TearDown(){}
-};
\ No newline at end of file
+};
+
+/*testing constructor: setting reference phrase */
+TEST(tappityTest, reference_set_empty)
+{
+	ASSERT_ANY_THROW(
+	{
+		string refer = "";
+		tappity tiptap(refer);
+	});
+}
+
+TEST(tappityTest, reference_set_letter)
+{
+	ASSERT_NO_THROW(
+	{
+		string refer = "a";
+		tappity tiptap(refer);
+	});
+}
+
+TEST(tappityTest, reference_set_char)
+{
+	ASSERT_NO_THROW(
+	{
+		string refer = "%";
+		tappity tiptap(refer);
+	});
+}
+
+
+TEST(tappityTest, reference_set_lowerWord)
+{
+	ASSERT_NO_THROW(
+	{
+		string refer = "apple";
+		tappity tiptap(refer);
+	});
+}
+
+TEST(tappityTest, reference_set_capitalWord)
+{
+	ASSERT_NO_THROW(
+	{
+		string refer = "Apple";
+		tappity tiptap(refer);
+	});
+}
+
+
+TEST(tappityTest, reference_set_lowerSentence)
+{
+	ASSERT_NO_THROW(
+	{
+		string refer = "apples grow on trees.";
+		tappity tiptap(refer);
+	});
+}
+
+TEST(tappityTest, reference_set_capitalSentence)
+{
+	ASSERT_NO_THROW(
+	{
+		string refer = "Apples grow on trees.";
+		tappity tiptap(refer);
+	});
+}
+
+/* testing entry function: getting user's input */
+TEST(tappityTest, input_set_empty)
+{
+	ASSERT_NO_THROW(
+	{
+		string refer = "Apples grow on trees.";	
+		string in = "";
+		tappity tiptap(refer);
+		tiptap.entry(in);
+	});
+}
+
+TEST(tappityTest, input_set_char)
+{
+	ASSERT_NO_THROW(
+	{
+		string refer = "Apples grow on trees.";	
+		string in = "&";
+		tappity tiptap(refer);
+		tiptap.entry(in);
+	});
+}
+
+TEST(tappityTest, input_set_capitalWord)
+{
+	ASSERT_NO_THROW(
+	{
+		string refer = "Apples grow on trees.";	
+		string in = "Apple";
+		tappity tiptap(refer);
+		tiptap.entry(in);
+	});
+}
+
+TEST(tappityTest, input_set_lowerWord)
+{
+	ASSERT_NO_THROW(
+	{
+		string refer = "Apples grow on trees.";	
+		string in = "apple";
+		tappity tiptap(refer);
+		tiptap.entry(in);
+	});
+}
+
+TEST(tappityTest, input_set_capitalSentence)
+{
+	ASSERT_NO_THROW(
+	{
+		string refer = "Apples grow on trees.";	
+		string in = "Apples grow on trees.";
+		tappity tiptap(refer);
+		tiptap.entry(in);
+	});
+}
+
+TEST(tappityTest, input_set_lowerSentence)
+{
+	ASSERT_NO_THROW(
+	{
+		string refer = "Apples grow on trees.";	
+		string in = "apples grow on trees.";
+		tappity tiptap(refer);
+		tiptap.entry(in);
+	});
+}
+
+TEST(tappityTest, input_set_doubleEntry)
+{
+	ASSERT_ANY_THROW(
+	{
+		string refer = "Apples grow on trees.";	
+		string in = "Apples grow on trees.";
+		tappity tiptap(refer);
+		tiptap.entry(in);
+		in = "apples";
+		tiptap.entry(in);
+	});
+}
+
+/*testing length_difference function: returns difference between reference and input length */
+
+TEST(tappityTest, lengDiff_emptyInput)
+{
+	string refer = "Apples grow on trees.";	
+	string in = "";
+	tappity tiptap(refer);
+	tiptap.entry(in);
+	int act_diff = tiptap.length_difference();
+	ASSERT_EQ(refer.length(), act_diff);
+}
+
+TEST(tappityTest, lengDiff_equalLeng)
+{
+	string refer = "Apples grow on trees.";	
+	string in = "serina eats on plates";
+	tappity tiptap(refer);
+	tiptap.entry(in);
+	int act_diff = tiptap.length_difference();
+	ASSERT_EQ(0, act_diff);
+}
+
+TEST(tappityTest, lengDiff_longerInput)
+{
+	string refer = "Apples grow on trees.";	
+	string in = "Christmas time is during the winter season.";
+	tappity tiptap(refer);
+	tiptap.entry(in);
+	int act_diff = tiptap.length_difference();
+	int exp_diff = in.length() - refer.length();
+	ASSERT_EQ(exp_diff, act_diff);
+}
+
+TEST(tappityTest, lengDiff_longerReference)
+{
+	string in = "Apples grow on trees.";	
+	string refer = "Christmas time is during the winter season.";
+	tappity tiptap(refer);
+	tiptap.entry(in);
+	int act_diff = tiptap.length_difference();
+	int exp_diff = refer.length() - in.length();
+	ASSERT_EQ(exp_diff, act_diff);
+}
+
+/*testing accuracy function: returns percentage */
+TEST(tappityTest, accuracy_exactMatch)
+{
+	string refer = "Apples grow on trees.";	
+	string in = "Apples grow on trees.";
+	tappity tiptap(refer);
+	tiptap.entry(in);
+	double act_acc = tiptap.accuracy();
+	ASSERT_EQ(double(100), act_acc);
+}
+
+TEST(tappityTest, accuracy_halfMatch)
+{
+	string refer = "Apples grow on trees";	
+	string in = "Apples gro";
+	tappity tiptap(refer);
+	tiptap.entry(in);
+	double act_acc = tiptap.accuracy();
+	ASSERT_EQ(double(50), act_acc);
+}
+
+TEST(tappityTest, accuracy_emptyInput)
+{
+	string refer = "Apples grow on trees.";	
+	string in = "";
+	tappity tiptap(refer);
+	tiptap.entry(in);
+	double act_acc = tiptap.accuracy();
+	ASSERT_EQ(double(0), act_acc);
+}
+
+TEST(tappityTest, accuracy_noMatch)
+{
+	string refer = "Apples grow on trees.";	
+	string in = "serina.eats.to.plates";
+	tappity tiptap(refer);
+	tiptap.entry(in);
+	double act_acc = tiptap.accuracy();
+	ASSERT_EQ(double(0), act_acc);
+}
+
+TEST(tappityTest, accuracy_longerInput)
+{
+	string refer = "Apples grow on trees";	
+	string in = "Apple is a healthy fruit.";
+	tappity tiptap(refer);
+	tiptap.entry(in);
+	double act_acc = tiptap.accuracy();
+	ASSERT_EQ(double(24), act_acc);
+}
+
+TEST(tappityTest, accuracy_longerReference)
+{
+	string in = "Apples grow on trees";	
+	string refer = "Apple is a healthy fruit.";
+	tappity tiptap(refer);
+	tiptap.entry(in);
+	double act_acc = tiptap.accuracy();
+	ASSERT_EQ(double(24), act_acc);
+}
